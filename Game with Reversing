///   ***   ---   ||         In the name of VOGOBAN        |||   ---   ***   ///


#include<bits/stdc++.h>
using namespace std;


typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;
typedef double dl;

#define endl '\n'
#define PB push_back
#define F first
#define S second
#define all(v) (v).begin(),(v).end()
#define rall(v) (v).rbegin(),(v).rend()
#define sz(x) (int)x.size()

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define file() freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu () {            cerr << endl;}
template < typename T, typename ... hello>void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}

ll gcd ( ll a, ll b ) { return __gcd ( a, b ); }
ll lcm ( ll a, ll b ) { return a * ( b / gcd ( a, b ) ); }
const int mx = 3000;
int a[mx];
int main()
{
    optimize();
         int t;
         cin >> t;

        while( t-- )
        {
            ll n;
            cin >> n;

            string s, t;
            cin >> s >> t;

            ll cnt1 = 0, cnt2 = 0;

            for ( auto i = 0; i < n; i++ )
            {
                if ( s[i] != t[i] )cnt1++;
            }
            reverse(all(t));

            for ( auto i = 0; i < n; i++ )
            {
                if ( s[i] != t[i] )cnt2++;
            }

            if ( cnt1 % 2 == 1)
                {
                    cnt1 = cnt1*2 - 1;
                }
            else 
                {
                    cnt1*=2;
                }
            if ( cnt2 % 2 == 1 )
                {
                    cnt2 *= 2;
                }
            else 
                {
                    cnt2 = (cnt2 * 2) - 1;
                }
                cnt2 = max(cnt2,2ll);
                cout << min(cnt1,cnt2) << endl;
        }
       return 0;
}
